image: node:18

variables:
  DOCS_IMAGE: $CI_REGISTRY_IMAGE/docs

cache:
  paths:
    - .pnpm-store

stages:
  - build_docs
  - build_docker

build_docs:
  stage: build_docs
  before_script:
    - npm install -g pnpm
    - pnpm config set store-dir .pnpm-store
  script:
    - pnpm install
    - pnpm run build
  artifacts:
    paths:
      - .next/

build_docker:
  stage: build_docker
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
  script:
    - |
      cat <<EOF > Dockerfile
      FROM node:22.9.0-alpine AS builder
      WORKDIR /app
      RUN npm install -g pnpm@9.12.2
      COPY pnpm-lock.yaml ./
      COPY package*.json ./
      RUN pnpm install
      COPY . .
      RUN ls -la /app
      RUN pnpm list
      RUN node --version
      RUN pnpm --version
      RUN pnpm run build

      FROM node:22.9.0-alpine
      WORKDIR /app
      RUN npm install -g pnpm@9.12.2
      COPY --from=builder /app/package*.json ./
      COPY --from=builder /app/.next ./.next
      COPY --from=builder /app/public ./public
      COPY --from=builder /app/node_modules ./node_modules
      COPY --from=builder /app/next.config.mjs ./next.config.mjs
      
      ENV NODE_ENV=production
      
      CMD ["pnpm", "start"]
      EOF
    - docker build -t $DOCS_IMAGE:$CI_COMMIT_REF_SLUG -t $DOCS_IMAGE:latest .
    - docker push $DOCS_IMAGE:$CI_COMMIT_REF_SLUG
    - docker push $DOCS_IMAGE:latest
  only:
    - main
